#ifndef __REGS_PCIE_TLR_DEF_H__
#define __REGS_PCIE_TLR_DEF_H__

#ifdef __ASSEMBLER__
#define _64bit(x) x
#else /* __ASSEMBLER__ */
#ifdef __tile__
#define _64bit(x) x ## UL
#else /* __tile__ */
#define _64bit(x) x ## ULL
#endif /* __tile__ */
#endif /* __ASSEMBLER */



#ifndef __DOXYGEN__

/*
 * MMIO Address Space.
 * The MMIO physical address space for the Pcie_tlr is described below.  This
 * is a general description of the MMIO space as opposed to a register
 * description
 */
#define PCIE_TLR_MMIO_ADDRESS_SPACE__FIRST_WORD 0x0000
#define PCIE_TLR_MMIO_ADDRESS_SPACE__LAST_WORD 0xfff8
#define PCIE_TLR_MMIO_ADDRESS_SPACE__LENGTH 0x10000
#define PCIE_TLR_MMIO_ADDRESS_SPACE__STRIDE 0x0008

#define PCIE_TLR_MMIO_ADDRESS_SPACE__OFFSET_SHIFT 0
#define PCIE_TLR_MMIO_ADDRESS_SPACE__OFFSET_WIDTH 15
#define PCIE_TLR_MMIO_ADDRESS_SPACE__OFFSET_RESET_VAL 0
#define PCIE_TLR_MMIO_ADDRESS_SPACE__OFFSET_RMASK 0x7fff
#define PCIE_TLR_MMIO_ADDRESS_SPACE__OFFSET_MASK  0x7fff
#define PCIE_TLR_MMIO_ADDRESS_SPACE__OFFSET_FIELD 0,14

#define PCIE_TLR_MMIO_ADDRESS_SPACE__REGION_SHIFT 15
#define PCIE_TLR_MMIO_ADDRESS_SPACE__REGION_WIDTH 1
#define PCIE_TLR_MMIO_ADDRESS_SPACE__REGION_RESET_VAL 0
#define PCIE_TLR_MMIO_ADDRESS_SPACE__REGION_RMASK 0x1
#define PCIE_TLR_MMIO_ADDRESS_SPACE__REGION_MASK  0x8000
#define PCIE_TLR_MMIO_ADDRESS_SPACE__REGION_FIELD 15,15
#define PCIE_TLR_MMIO_ADDRESS_SPACE__REGION_VAL_CFG 0x0
#define PCIE_TLR_MMIO_ADDRESS_SPACE__REGION_VAL_Metrics 0x1


/*
 * SCRATCHPAD.
 * Scratchpad register
 */
#define PCIE_TLR_SCRATCHPAD 0x0000
#define PCIE_TLR_SCRATCHPAD__LENGTH 0x0001

#define PCIE_TLR_SCRATCHPAD__SCRATCHPAD_SHIFT 0
#define PCIE_TLR_SCRATCHPAD__SCRATCHPAD_WIDTH 64
#define PCIE_TLR_SCRATCHPAD__SCRATCHPAD_RESET_VAL 0
#define PCIE_TLR_SCRATCHPAD__SCRATCHPAD_RMASK _64bit(0xffffffffffffffff)
#define PCIE_TLR_SCRATCHPAD__SCRATCHPAD_MASK  _64bit(0xffffffffffffffff)
#define PCIE_TLR_SCRATCHPAD__SCRATCHPAD_FIELD 0,63


/*
 * TP0 Ring Node ID.
 * Ring node ID for TP0 block, used to direct PCIe packets on the ring.
 * MAX/MIN fields are used as a comparison range when decoding LinkID from
 * PXT.  Range values must not overlap another NODEID's range.  Set MAX/MIN
 * the same for single LinkID value.
 */
#define PCIE_TLR_TP0_RING_NODEID 0x0008
#define PCIE_TLR_TP0_RING_NODEID__LENGTH 0x0001

#define PCIE_TLR_TP0_RING_NODEID__NODEID_SHIFT 0
#define PCIE_TLR_TP0_RING_NODEID__NODEID_WIDTH 5
#define PCIE_TLR_TP0_RING_NODEID__NODEID_RESET_VAL 0
#define PCIE_TLR_TP0_RING_NODEID__NODEID_RMASK 0x1f
#define PCIE_TLR_TP0_RING_NODEID__NODEID_MASK  0x1f
#define PCIE_TLR_TP0_RING_NODEID__NODEID_FIELD 0,4

#define PCIE_TLR_TP0_RING_NODEID__LINKID_MIN_SHIFT 8
#define PCIE_TLR_TP0_RING_NODEID__LINKID_MIN_WIDTH 5
#define PCIE_TLR_TP0_RING_NODEID__LINKID_MIN_RESET_VAL 0
#define PCIE_TLR_TP0_RING_NODEID__LINKID_MIN_RMASK 0x1f
#define PCIE_TLR_TP0_RING_NODEID__LINKID_MIN_MASK  0x1f00
#define PCIE_TLR_TP0_RING_NODEID__LINKID_MIN_FIELD 8,12

#define PCIE_TLR_TP0_RING_NODEID__LINKID_MAX_SHIFT 13
#define PCIE_TLR_TP0_RING_NODEID__LINKID_MAX_WIDTH 5
#define PCIE_TLR_TP0_RING_NODEID__LINKID_MAX_RESET_VAL 7
#define PCIE_TLR_TP0_RING_NODEID__LINKID_MAX_RMASK 0x1f
#define PCIE_TLR_TP0_RING_NODEID__LINKID_MAX_MASK  0x3e000
#define PCIE_TLR_TP0_RING_NODEID__LINKID_MAX_FIELD 13,17


/*
 * TP1 Ring Node ID.
 * Ring node ID for TP1 block, used to direct PCIe packets on the ring.
 * MAX/MIN fields are used as a comparison range when decoding LinkID from
 * PXT.  Range values must not overlap another NODEID's range.  Set MAX/MIN
 * the same for single LinkID value.
 */
#define PCIE_TLR_TP1_RING_NODEID 0x0010
#define PCIE_TLR_TP1_RING_NODEID__LENGTH 0x0001

#define PCIE_TLR_TP1_RING_NODEID__NODEID_SHIFT 0
#define PCIE_TLR_TP1_RING_NODEID__NODEID_WIDTH 5
#define PCIE_TLR_TP1_RING_NODEID__NODEID_RESET_VAL 0
#define PCIE_TLR_TP1_RING_NODEID__NODEID_RMASK 0x1f
#define PCIE_TLR_TP1_RING_NODEID__NODEID_MASK  0x1f
#define PCIE_TLR_TP1_RING_NODEID__NODEID_FIELD 0,4

#define PCIE_TLR_TP1_RING_NODEID__LINKID_MIN_SHIFT 8
#define PCIE_TLR_TP1_RING_NODEID__LINKID_MIN_WIDTH 5
#define PCIE_TLR_TP1_RING_NODEID__LINKID_MIN_RESET_VAL 8
#define PCIE_TLR_TP1_RING_NODEID__LINKID_MIN_RMASK 0x1f
#define PCIE_TLR_TP1_RING_NODEID__LINKID_MIN_MASK  0x1f00
#define PCIE_TLR_TP1_RING_NODEID__LINKID_MIN_FIELD 8,12

#define PCIE_TLR_TP1_RING_NODEID__LINKID_MAX_SHIFT 13
#define PCIE_TLR_TP1_RING_NODEID__LINKID_MAX_WIDTH 5
#define PCIE_TLR_TP1_RING_NODEID__LINKID_MAX_RESET_VAL 15
#define PCIE_TLR_TP1_RING_NODEID__LINKID_MAX_RMASK 0x1f
#define PCIE_TLR_TP1_RING_NODEID__LINKID_MAX_MASK  0x3e000
#define PCIE_TLR_TP1_RING_NODEID__LINKID_MAX_FIELD 13,17


/*
 * HCA0 Ring Node ID.
 * Ring node ID for HCA0 block, used to direct PCIe packets on the ring.
 * MAX/MIN fields are used as a comparison range when decoding LinkID from
 * PXT.  Range values must not overlap another NODEID's range.  Set MAX/MIN
 * the same for single LinkID value.
 */
#define PCIE_TLR_HCA0_RING_NODEID 0x0018
#define PCIE_TLR_HCA0_RING_NODEID__LENGTH 0x0001

#define PCIE_TLR_HCA0_RING_NODEID__NODEID_SHIFT 0
#define PCIE_TLR_HCA0_RING_NODEID__NODEID_WIDTH 5
#define PCIE_TLR_HCA0_RING_NODEID__NODEID_RESET_VAL 0
#define PCIE_TLR_HCA0_RING_NODEID__NODEID_RMASK 0x1f
#define PCIE_TLR_HCA0_RING_NODEID__NODEID_MASK  0x1f
#define PCIE_TLR_HCA0_RING_NODEID__NODEID_FIELD 0,4

#define PCIE_TLR_HCA0_RING_NODEID__LINKID_MIN_SHIFT 8
#define PCIE_TLR_HCA0_RING_NODEID__LINKID_MIN_WIDTH 5
#define PCIE_TLR_HCA0_RING_NODEID__LINKID_MIN_RESET_VAL 16
#define PCIE_TLR_HCA0_RING_NODEID__LINKID_MIN_RMASK 0x1f
#define PCIE_TLR_HCA0_RING_NODEID__LINKID_MIN_MASK  0x1f00
#define PCIE_TLR_HCA0_RING_NODEID__LINKID_MIN_FIELD 8,12

#define PCIE_TLR_HCA0_RING_NODEID__LINKID_MAX_SHIFT 13
#define PCIE_TLR_HCA0_RING_NODEID__LINKID_MAX_WIDTH 5
#define PCIE_TLR_HCA0_RING_NODEID__LINKID_MAX_RESET_VAL 16
#define PCIE_TLR_HCA0_RING_NODEID__LINKID_MAX_RMASK 0x1f
#define PCIE_TLR_HCA0_RING_NODEID__LINKID_MAX_MASK  0x3e000
#define PCIE_TLR_HCA0_RING_NODEID__LINKID_MAX_FIELD 13,17


/*
 * ARM LINK ID.
 * LinkID for ARM cores, used to decode incoming PXT packets. The ARM cores
 * are not accessed via the ring.
 */
#define PCIE_TLR_ARM_LINKID 0x0020
#define PCIE_TLR_ARM_LINKID__LENGTH 0x0001

#define PCIE_TLR_ARM_LINKID__LINKID_SHIFT 0
#define PCIE_TLR_ARM_LINKID__LINKID_WIDTH 5
#define PCIE_TLR_ARM_LINKID__LINKID_RESET_VAL 17
#define PCIE_TLR_ARM_LINKID__LINKID_RMASK 0x1f
#define PCIE_TLR_ARM_LINKID__LINKID_MASK  0x1f
#define PCIE_TLR_ARM_LINKID__LINKID_FIELD 0,4


/*
 * TLR2PXT interface credits.
 * Controls interface credits between TLR and PXT
 */
#define PCIE_TLR_TLR2PXT_INTF_CREDITS 0x0028
#define PCIE_TLR_TLR2PXT_INTF_CREDITS__LENGTH 0x0001

#define PCIE_TLR_TLR2PXT_INTF_CREDITS__VAL_SHIFT 0
#define PCIE_TLR_TLR2PXT_INTF_CREDITS__VAL_WIDTH 4
#define PCIE_TLR_TLR2PXT_INTF_CREDITS__VAL_RESET_VAL 0
#define PCIE_TLR_TLR2PXT_INTF_CREDITS__VAL_RMASK 0xf
#define PCIE_TLR_TLR2PXT_INTF_CREDITS__VAL_MASK  0xf
#define PCIE_TLR_TLR2PXT_INTF_CREDITS__VAL_FIELD 0,3


/*
 * ARM TLP Packet IDs.
 * Programmable TLP RequesteID and CompleterID fields, used for packets sent
 * from ARM to PXT
 */
#define PCIE_TLR_ARM_TLP_PKT_ID 0x0030
#define PCIE_TLR_ARM_TLP_PKT_ID__LENGTH 0x0001

#define PCIE_TLR_ARM_TLP_PKT_ID__REQ_ID_SHIFT 0
#define PCIE_TLR_ARM_TLP_PKT_ID__REQ_ID_WIDTH 16
#define PCIE_TLR_ARM_TLP_PKT_ID__REQ_ID_RESET_VAL 0
#define PCIE_TLR_ARM_TLP_PKT_ID__REQ_ID_RMASK 0xffff
#define PCIE_TLR_ARM_TLP_PKT_ID__REQ_ID_MASK  0xffff
#define PCIE_TLR_ARM_TLP_PKT_ID__REQ_ID_FIELD 0,15

#define PCIE_TLR_ARM_TLP_PKT_ID__CMPLTR_ID_SHIFT 16
#define PCIE_TLR_ARM_TLP_PKT_ID__CMPLTR_ID_WIDTH 16
#define PCIE_TLR_ARM_TLP_PKT_ID__CMPLTR_ID_RESET_VAL 0
#define PCIE_TLR_ARM_TLP_PKT_ID__CMPLTR_ID_RMASK 0xffff
#define PCIE_TLR_ARM_TLP_PKT_ID__CMPLTR_ID_MASK  0xffff0000
#define PCIE_TLR_ARM_TLP_PKT_ID__CMPLTR_ID_FIELD 16,31


/*
 * PKT Stop Mode Config.
 * TLR reponse mode to PXT packet stop request signal
 */
#define PCIE_TLR_PKT_STOP_CFG 0x0038
#define PCIE_TLR_PKT_STOP_CFG__LENGTH 0x0001

#define PCIE_TLR_PKT_STOP_CFG__MODE_SHIFT 0
#define PCIE_TLR_PKT_STOP_CFG__MODE_WIDTH 1
#define PCIE_TLR_PKT_STOP_CFG__MODE_RESET_VAL 0
#define PCIE_TLR_PKT_STOP_CFG__MODE_RMASK 0x1
#define PCIE_TLR_PKT_STOP_CFG__MODE_MASK  0x1
#define PCIE_TLR_PKT_STOP_CFG__MODE_FIELD 0,0
#define PCIE_TLR_PKT_STOP_CFG__MODE_VAL_FlushMode 0x0
#define PCIE_TLR_PKT_STOP_CFG__MODE_VAL_HaltMode 0x1


/*
 * SW Coherence Fence.
 * Coherence fence register. When enabled, sequence number of  packet write
 * is recorded.  HW will clear the enable when write with recorded sequence
 * number is completed.
 */
#define PCIE_TLR_COHERENCE_FENCE 0x0040
#define PCIE_TLR_COHERENCE_FENCE__LENGTH 0x0001

#define PCIE_TLR_COHERENCE_FENCE__FENCE_ENABLE_SHIFT 0
#define PCIE_TLR_COHERENCE_FENCE__FENCE_ENABLE_WIDTH 1
#define PCIE_TLR_COHERENCE_FENCE__FENCE_ENABLE_RESET_VAL 0
#define PCIE_TLR_COHERENCE_FENCE__FENCE_ENABLE_RMASK 0x1
#define PCIE_TLR_COHERENCE_FENCE__FENCE_ENABLE_MASK  0x1
#define PCIE_TLR_COHERENCE_FENCE__FENCE_ENABLE_FIELD 0,0

#define PCIE_TLR_COHERENCE_FENCE__FENCE_SQN_SHIFT 16
#define PCIE_TLR_COHERENCE_FENCE__FENCE_SQN_WIDTH 11
#define PCIE_TLR_COHERENCE_FENCE__FENCE_SQN_RESET_VAL 0
#define PCIE_TLR_COHERENCE_FENCE__FENCE_SQN_RMASK 0x7ff
#define PCIE_TLR_COHERENCE_FENCE__FENCE_SQN_MASK  0x7ff0000
#define PCIE_TLR_COHERENCE_FENCE__FENCE_SQN_FIELD 16,26

#define PCIE_TLR_COHERENCE_FENCE__RETIRED_SQN_SHIFT 32
#define PCIE_TLR_COHERENCE_FENCE__RETIRED_SQN_WIDTH 11
#define PCIE_TLR_COHERENCE_FENCE__RETIRED_SQN_RESET_VAL 0
#define PCIE_TLR_COHERENCE_FENCE__RETIRED_SQN_RMASK 0x7ff
#define PCIE_TLR_COHERENCE_FENCE__RETIRED_SQN_MASK  _64bit(0x7ff00000000)
#define PCIE_TLR_COHERENCE_FENCE__RETIRED_SQN_FIELD 32,42


/*
 * Incoming Posted Packet Count.
 * Count register for incoming (from PXT) Posted Packets
 */
#define PCIE_TLR_IN_P_PKT_CNT 0x8000
#define PCIE_TLR_IN_P_PKT_CNT__LENGTH 0x0001

#define PCIE_TLR_IN_P_PKT_CNT__PKT_COUNT_SHIFT 0
#define PCIE_TLR_IN_P_PKT_CNT__PKT_COUNT_WIDTH 56
#define PCIE_TLR_IN_P_PKT_CNT__PKT_COUNT_RESET_VAL 0
#define PCIE_TLR_IN_P_PKT_CNT__PKT_COUNT_RMASK _64bit(0xffffffffffffff)
#define PCIE_TLR_IN_P_PKT_CNT__PKT_COUNT_MASK  _64bit(0xffffffffffffff)
#define PCIE_TLR_IN_P_PKT_CNT__PKT_COUNT_FIELD 0,55


/*
 * Incoming Non-Posted Packet Count.
 * Count register for incoming (from PXT) Non-Posted Packets
 */
#define PCIE_TLR_IN_NP_PKT_CNT 0x8010
#define PCIE_TLR_IN_NP_PKT_CNT__LENGTH 0x0001

#define PCIE_TLR_IN_NP_PKT_CNT__PKT_COUNT_SHIFT 0
#define PCIE_TLR_IN_NP_PKT_CNT__PKT_COUNT_WIDTH 56
#define PCIE_TLR_IN_NP_PKT_CNT__PKT_COUNT_RESET_VAL 0
#define PCIE_TLR_IN_NP_PKT_CNT__PKT_COUNT_RMASK _64bit(0xffffffffffffff)
#define PCIE_TLR_IN_NP_PKT_CNT__PKT_COUNT_MASK  _64bit(0xffffffffffffff)
#define PCIE_TLR_IN_NP_PKT_CNT__PKT_COUNT_FIELD 0,55


/*
 * Incoming C Packet Count.
 * Count register for incoming (from PXT) Completion Packets
 */
#define PCIE_TLR_IN_C_PKT_CNT 0x8018
#define PCIE_TLR_IN_C_PKT_CNT__LENGTH 0x0001

#define PCIE_TLR_IN_C_PKT_CNT__PKT_COUNT_SHIFT 0
#define PCIE_TLR_IN_C_PKT_CNT__PKT_COUNT_WIDTH 56
#define PCIE_TLR_IN_C_PKT_CNT__PKT_COUNT_RESET_VAL 0
#define PCIE_TLR_IN_C_PKT_CNT__PKT_COUNT_RMASK _64bit(0xffffffffffffff)
#define PCIE_TLR_IN_C_PKT_CNT__PKT_COUNT_MASK  _64bit(0xffffffffffffff)
#define PCIE_TLR_IN_C_PKT_CNT__PKT_COUNT_FIELD 0,55


/*
 * Outgoing Posted Packet Count.
 * Count register for outgoing (to PXT) Posted Packets
 */
#define PCIE_TLR_OUT_P_PKT_CNT 0x8020
#define PCIE_TLR_OUT_P_PKT_CNT__LENGTH 0x0001

#define PCIE_TLR_OUT_P_PKT_CNT__PKT_COUNT_SHIFT 0
#define PCIE_TLR_OUT_P_PKT_CNT__PKT_COUNT_WIDTH 56
#define PCIE_TLR_OUT_P_PKT_CNT__PKT_COUNT_RESET_VAL 0
#define PCIE_TLR_OUT_P_PKT_CNT__PKT_COUNT_RMASK _64bit(0xffffffffffffff)
#define PCIE_TLR_OUT_P_PKT_CNT__PKT_COUNT_MASK  _64bit(0xffffffffffffff)
#define PCIE_TLR_OUT_P_PKT_CNT__PKT_COUNT_FIELD 0,55


/*
 * Outgoing Non-Posted Packet Count.
 * Count register for outgoing (to PXT) Non-Posted Packets
 */
#define PCIE_TLR_OUT_NP_PKT_CNT 0x8028
#define PCIE_TLR_OUT_NP_PKT_CNT__LENGTH 0x0001

#define PCIE_TLR_OUT_NP_PKT_CNT__PKT_COUNT_SHIFT 0
#define PCIE_TLR_OUT_NP_PKT_CNT__PKT_COUNT_WIDTH 56
#define PCIE_TLR_OUT_NP_PKT_CNT__PKT_COUNT_RESET_VAL 0
#define PCIE_TLR_OUT_NP_PKT_CNT__PKT_COUNT_RMASK _64bit(0xffffffffffffff)
#define PCIE_TLR_OUT_NP_PKT_CNT__PKT_COUNT_MASK  _64bit(0xffffffffffffff)
#define PCIE_TLR_OUT_NP_PKT_CNT__PKT_COUNT_FIELD 0,55


/*
 * Outgoing C Packet Count.
 * Count register for outgoing (to PXT) Completion Packets
 */
#define PCIE_TLR_OUT_C_PKT_CNT 0x8030
#define PCIE_TLR_OUT_C_PKT_CNT__LENGTH 0x0001

#define PCIE_TLR_OUT_C_PKT_CNT__PKT_COUNT_SHIFT 0
#define PCIE_TLR_OUT_C_PKT_CNT__PKT_COUNT_WIDTH 56
#define PCIE_TLR_OUT_C_PKT_CNT__PKT_COUNT_RESET_VAL 0
#define PCIE_TLR_OUT_C_PKT_CNT__PKT_COUNT_RMASK _64bit(0xffffffffffffff)
#define PCIE_TLR_OUT_C_PKT_CNT__PKT_COUNT_MASK  _64bit(0xffffffffffffff)
#define PCIE_TLR_OUT_C_PKT_CNT__PKT_COUNT_FIELD 0,55


/*
 * Incoming Posted Byte Count.
 * Count register for incoming (from PXT) Posted bytes
 */
#define PCIE_TLR_IN_P_BYTE_CNT 0x8038
#define PCIE_TLR_IN_P_BYTE_CNT__LENGTH 0x0001

#define PCIE_TLR_IN_P_BYTE_CNT__BYTE_COUNT_SHIFT 0
#define PCIE_TLR_IN_P_BYTE_CNT__BYTE_COUNT_WIDTH 56
#define PCIE_TLR_IN_P_BYTE_CNT__BYTE_COUNT_RESET_VAL 0
#define PCIE_TLR_IN_P_BYTE_CNT__BYTE_COUNT_RMASK _64bit(0xffffffffffffff)
#define PCIE_TLR_IN_P_BYTE_CNT__BYTE_COUNT_MASK  _64bit(0xffffffffffffff)
#define PCIE_TLR_IN_P_BYTE_CNT__BYTE_COUNT_FIELD 0,55


/*
 * Incoming Non-Posted Byte Count.
 * Count register for incoming (from PXT) Non-Posted bytes
 */
#define PCIE_TLR_IN_NP_BYTE_CNT 0x8040
#define PCIE_TLR_IN_NP_BYTE_CNT__LENGTH 0x0001

#define PCIE_TLR_IN_NP_BYTE_CNT__BYTE_COUNT_SHIFT 0
#define PCIE_TLR_IN_NP_BYTE_CNT__BYTE_COUNT_WIDTH 56
#define PCIE_TLR_IN_NP_BYTE_CNT__BYTE_COUNT_RESET_VAL 0
#define PCIE_TLR_IN_NP_BYTE_CNT__BYTE_COUNT_RMASK _64bit(0xffffffffffffff)
#define PCIE_TLR_IN_NP_BYTE_CNT__BYTE_COUNT_MASK  _64bit(0xffffffffffffff)
#define PCIE_TLR_IN_NP_BYTE_CNT__BYTE_COUNT_FIELD 0,55


/*
 * Incoming Completion Byte Count.
 * Count register for incoming (from PXT) Completion bytes
 */
#define PCIE_TLR_IN_C_BYTE_CNT 0x8048
#define PCIE_TLR_IN_C_BYTE_CNT__LENGTH 0x0001

#define PCIE_TLR_IN_C_BYTE_CNT__BYTE_COUNT_SHIFT 0
#define PCIE_TLR_IN_C_BYTE_CNT__BYTE_COUNT_WIDTH 56
#define PCIE_TLR_IN_C_BYTE_CNT__BYTE_COUNT_RESET_VAL 0
#define PCIE_TLR_IN_C_BYTE_CNT__BYTE_COUNT_RMASK _64bit(0xffffffffffffff)
#define PCIE_TLR_IN_C_BYTE_CNT__BYTE_COUNT_MASK  _64bit(0xffffffffffffff)
#define PCIE_TLR_IN_C_BYTE_CNT__BYTE_COUNT_FIELD 0,55


/*
 * Outgoing Posted Byte Count.
 * Count register for outgoing (to PXT) Posted bytes
 */
#define PCIE_TLR_OUT_P_BYTE_CNT 0x8050
#define PCIE_TLR_OUT_P_BYTE_CNT__LENGTH 0x0001

#define PCIE_TLR_OUT_P_BYTE_CNT__BYTE_COUNT_SHIFT 0
#define PCIE_TLR_OUT_P_BYTE_CNT__BYTE_COUNT_WIDTH 56
#define PCIE_TLR_OUT_P_BYTE_CNT__BYTE_COUNT_RESET_VAL 0
#define PCIE_TLR_OUT_P_BYTE_CNT__BYTE_COUNT_RMASK _64bit(0xffffffffffffff)
#define PCIE_TLR_OUT_P_BYTE_CNT__BYTE_COUNT_MASK  _64bit(0xffffffffffffff)
#define PCIE_TLR_OUT_P_BYTE_CNT__BYTE_COUNT_FIELD 0,55


/*
 * Outgoing Non-Posted Byte Count.
 * Count register for outgoing (to PXT) Non-Posted bytes
 */
#define PCIE_TLR_OUT_NP_BYTE_CNT 0x8058
#define PCIE_TLR_OUT_NP_BYTE_CNT__LENGTH 0x0001

#define PCIE_TLR_OUT_NP_BYTE_CNT__BYTE_COUNT_SHIFT 0
#define PCIE_TLR_OUT_NP_BYTE_CNT__BYTE_COUNT_WIDTH 56
#define PCIE_TLR_OUT_NP_BYTE_CNT__BYTE_COUNT_RESET_VAL 0
#define PCIE_TLR_OUT_NP_BYTE_CNT__BYTE_COUNT_RMASK _64bit(0xffffffffffffff)
#define PCIE_TLR_OUT_NP_BYTE_CNT__BYTE_COUNT_MASK  _64bit(0xffffffffffffff)
#define PCIE_TLR_OUT_NP_BYTE_CNT__BYTE_COUNT_FIELD 0,55


/*
 * Outgoing Completion Byte Count.
 * Count register for outgoing (to PXT) Completion bytes
 */
#define PCIE_TLR_OUT_C_BYTE_CNT 0x8060
#define PCIE_TLR_OUT_C_BYTE_CNT__LENGTH 0x0001

#define PCIE_TLR_OUT_C_BYTE_CNT__BYTE_COUNT_SHIFT 0
#define PCIE_TLR_OUT_C_BYTE_CNT__BYTE_COUNT_WIDTH 56
#define PCIE_TLR_OUT_C_BYTE_CNT__BYTE_COUNT_RESET_VAL 0
#define PCIE_TLR_OUT_C_BYTE_CNT__BYTE_COUNT_RMASK _64bit(0xffffffffffffff)
#define PCIE_TLR_OUT_C_BYTE_CNT__BYTE_COUNT_MASK  _64bit(0xffffffffffffff)
#define PCIE_TLR_OUT_C_BYTE_CNT__BYTE_COUNT_FIELD 0,55


/*
 * TLR State Status.
 * Status register that captures current state of key elements in the PCIE_TLR
 */
#define PCIE_TLR_TLR_STATE_STATUS 0x8068
#define PCIE_TLR_TLR_STATE_STATUS__LENGTH 0x0001

#define PCIE_TLR_TLR_STATE_STATUS__PXT_IN_FIFO_EMPTY_SHIFT 0
#define PCIE_TLR_TLR_STATE_STATUS__PXT_IN_FIFO_EMPTY_WIDTH 1
#define PCIE_TLR_TLR_STATE_STATUS__PXT_IN_FIFO_EMPTY_RESET_VAL 0
#define PCIE_TLR_TLR_STATE_STATUS__PXT_IN_FIFO_EMPTY_RMASK 0x1
#define PCIE_TLR_TLR_STATE_STATUS__PXT_IN_FIFO_EMPTY_MASK  0x1
#define PCIE_TLR_TLR_STATE_STATUS__PXT_IN_FIFO_EMPTY_FIELD 0,0

#define PCIE_TLR_TLR_STATE_STATUS__RDB_FIFO_EMPTY_SHIFT 1
#define PCIE_TLR_TLR_STATE_STATUS__RDB_FIFO_EMPTY_WIDTH 1
#define PCIE_TLR_TLR_STATE_STATUS__RDB_FIFO_EMPTY_RESET_VAL 0
#define PCIE_TLR_TLR_STATE_STATUS__RDB_FIFO_EMPTY_RMASK 0x1
#define PCIE_TLR_TLR_STATE_STATUS__RDB_FIFO_EMPTY_MASK  0x2
#define PCIE_TLR_TLR_STATE_STATUS__RDB_FIFO_EMPTY_FIELD 1,1

#define PCIE_TLR_TLR_STATE_STATUS__TRIO_IN_FIFO_EMPTY_SHIFT 2
#define PCIE_TLR_TLR_STATE_STATUS__TRIO_IN_FIFO_EMPTY_WIDTH 1
#define PCIE_TLR_TLR_STATE_STATUS__TRIO_IN_FIFO_EMPTY_RESET_VAL 0
#define PCIE_TLR_TLR_STATE_STATUS__TRIO_IN_FIFO_EMPTY_RMASK 0x1
#define PCIE_TLR_TLR_STATE_STATUS__TRIO_IN_FIFO_EMPTY_MASK  0x4
#define PCIE_TLR_TLR_STATE_STATUS__TRIO_IN_FIFO_EMPTY_FIELD 2,2

#define PCIE_TLR_TLR_STATE_STATUS__RING_IN_FIFO_EMPTY_SHIFT 3
#define PCIE_TLR_TLR_STATE_STATUS__RING_IN_FIFO_EMPTY_WIDTH 1
#define PCIE_TLR_TLR_STATE_STATUS__RING_IN_FIFO_EMPTY_RESET_VAL 0
#define PCIE_TLR_TLR_STATE_STATUS__RING_IN_FIFO_EMPTY_RMASK 0x1
#define PCIE_TLR_TLR_STATE_STATUS__RING_IN_FIFO_EMPTY_MASK  0x8
#define PCIE_TLR_TLR_STATE_STATUS__RING_IN_FIFO_EMPTY_FIELD 3,3

#define PCIE_TLR_TLR_STATE_STATUS__PXT_OUT_FIFO_EMPTY_SHIFT 4
#define PCIE_TLR_TLR_STATE_STATUS__PXT_OUT_FIFO_EMPTY_WIDTH 1
#define PCIE_TLR_TLR_STATE_STATUS__PXT_OUT_FIFO_EMPTY_RESET_VAL 0
#define PCIE_TLR_TLR_STATE_STATUS__PXT_OUT_FIFO_EMPTY_RMASK 0x1
#define PCIE_TLR_TLR_STATE_STATUS__PXT_OUT_FIFO_EMPTY_MASK  0x10
#define PCIE_TLR_TLR_STATE_STATUS__PXT_OUT_FIFO_EMPTY_FIELD 4,4

#define PCIE_TLR_TLR_STATE_STATUS__TLR_NO_PKTS_IN_FLIGHT_SHIFT 5
#define PCIE_TLR_TLR_STATE_STATUS__TLR_NO_PKTS_IN_FLIGHT_WIDTH 1
#define PCIE_TLR_TLR_STATE_STATUS__TLR_NO_PKTS_IN_FLIGHT_RESET_VAL 0
#define PCIE_TLR_TLR_STATE_STATUS__TLR_NO_PKTS_IN_FLIGHT_RMASK 0x1
#define PCIE_TLR_TLR_STATE_STATUS__TLR_NO_PKTS_IN_FLIGHT_MASK  0x20
#define PCIE_TLR_TLR_STATE_STATUS__TLR_NO_PKTS_IN_FLIGHT_FIELD 5,5


/*
 * TLR RX Sequence number status.
 * Status register that captures current sequence number states on RX (from
 * PXT) side
 */
#define PCIE_TLR_TLR_RX_SQN_STATUS 0x806c
#define PCIE_TLR_TLR_RX_SQN_STATUS__LENGTH 0x0001

#define PCIE_TLR_TLR_RX_SQN_STATUS__LAST_TRIO_SQN_SHIFT 0
#define PCIE_TLR_TLR_RX_SQN_STATUS__LAST_TRIO_SQN_WIDTH 11
#define PCIE_TLR_TLR_RX_SQN_STATUS__LAST_TRIO_SQN_RESET_VAL 0
#define PCIE_TLR_TLR_RX_SQN_STATUS__LAST_TRIO_SQN_RMASK 0x7ff
#define PCIE_TLR_TLR_RX_SQN_STATUS__LAST_TRIO_SQN_MASK  0x7ff
#define PCIE_TLR_TLR_RX_SQN_STATUS__LAST_TRIO_SQN_FIELD 0,10

#define PCIE_TLR_TLR_RX_SQN_STATUS__LAST_RING_SQN_SHIFT 12
#define PCIE_TLR_TLR_RX_SQN_STATUS__LAST_RING_SQN_WIDTH 11
#define PCIE_TLR_TLR_RX_SQN_STATUS__LAST_RING_SQN_RESET_VAL 0
#define PCIE_TLR_TLR_RX_SQN_STATUS__LAST_RING_SQN_RMASK 0x7ff
#define PCIE_TLR_TLR_RX_SQN_STATUS__LAST_RING_SQN_MASK  0x7ff000
#define PCIE_TLR_TLR_RX_SQN_STATUS__LAST_RING_SQN_FIELD 12,22

#define PCIE_TLR_TLR_RX_SQN_STATUS__RDB_TX_SQN_SHIFT 24
#define PCIE_TLR_TLR_RX_SQN_STATUS__RDB_TX_SQN_WIDTH 11
#define PCIE_TLR_TLR_RX_SQN_STATUS__RDB_TX_SQN_RESET_VAL 0
#define PCIE_TLR_TLR_RX_SQN_STATUS__RDB_TX_SQN_RMASK 0x7ff
#define PCIE_TLR_TLR_RX_SQN_STATUS__RDB_TX_SQN_MASK  _64bit(0x7ff000000)
#define PCIE_TLR_TLR_RX_SQN_STATUS__RDB_TX_SQN_FIELD 24,34

#define PCIE_TLR_TLR_RX_SQN_STATUS__RDB_NOT_EMPTY_SHIFT 35
#define PCIE_TLR_TLR_RX_SQN_STATUS__RDB_NOT_EMPTY_WIDTH 1
#define PCIE_TLR_TLR_RX_SQN_STATUS__RDB_NOT_EMPTY_RESET_VAL 0
#define PCIE_TLR_TLR_RX_SQN_STATUS__RDB_NOT_EMPTY_RMASK 0x1
#define PCIE_TLR_TLR_RX_SQN_STATUS__RDB_NOT_EMPTY_MASK  _64bit(0x800000000)
#define PCIE_TLR_TLR_RX_SQN_STATUS__RDB_NOT_EMPTY_FIELD 35,35

#define PCIE_TLR_TLR_RX_SQN_STATUS__RDB_GATE_SQN_SHIFT 36
#define PCIE_TLR_TLR_RX_SQN_STATUS__RDB_GATE_SQN_WIDTH 11
#define PCIE_TLR_TLR_RX_SQN_STATUS__RDB_GATE_SQN_RESET_VAL 0
#define PCIE_TLR_TLR_RX_SQN_STATUS__RDB_GATE_SQN_RMASK 0x7ff
#define PCIE_TLR_TLR_RX_SQN_STATUS__RDB_GATE_SQN_MASK  _64bit(0x7ff000000000)
#define PCIE_TLR_TLR_RX_SQN_STATUS__RDB_GATE_SQN_FIELD 36,46

#define PCIE_TLR_TLR_RX_SQN_STATUS__RX_RING_SQN_OVRD_SHIFT 47
#define PCIE_TLR_TLR_RX_SQN_STATUS__RX_RING_SQN_OVRD_WIDTH 1
#define PCIE_TLR_TLR_RX_SQN_STATUS__RX_RING_SQN_OVRD_RESET_VAL 0
#define PCIE_TLR_TLR_RX_SQN_STATUS__RX_RING_SQN_OVRD_RMASK 0x1
#define PCIE_TLR_TLR_RX_SQN_STATUS__RX_RING_SQN_OVRD_MASK  _64bit(0x800000000000)
#define PCIE_TLR_TLR_RX_SQN_STATUS__RX_RING_SQN_OVRD_FIELD 47,47

#define PCIE_TLR_TLR_RX_SQN_STATUS__RX_FULL_SQN_OVRD_SHIFT 48
#define PCIE_TLR_TLR_RX_SQN_STATUS__RX_FULL_SQN_OVRD_WIDTH 1
#define PCIE_TLR_TLR_RX_SQN_STATUS__RX_FULL_SQN_OVRD_RESET_VAL 0
#define PCIE_TLR_TLR_RX_SQN_STATUS__RX_FULL_SQN_OVRD_RMASK 0x1
#define PCIE_TLR_TLR_RX_SQN_STATUS__RX_FULL_SQN_OVRD_MASK  _64bit(0x1000000000000)
#define PCIE_TLR_TLR_RX_SQN_STATUS__RX_FULL_SQN_OVRD_FIELD 48,48


/*
 * TLR RX Sequence number status.
 * Status register that captures current sequence number states on TX (to
 * PXT) side
 */
#define PCIE_TLR_TLR_TX_SQN_STATUS 0x8070
#define PCIE_TLR_TLR_TX_SQN_STATUS__LENGTH 0x0001

#define PCIE_TLR_TLR_TX_SQN_STATUS__LAST_TRIO_SQN_SHIFT 0
#define PCIE_TLR_TLR_TX_SQN_STATUS__LAST_TRIO_SQN_WIDTH 11
#define PCIE_TLR_TLR_TX_SQN_STATUS__LAST_TRIO_SQN_RESET_VAL 0
#define PCIE_TLR_TLR_TX_SQN_STATUS__LAST_TRIO_SQN_RMASK 0x7ff
#define PCIE_TLR_TLR_TX_SQN_STATUS__LAST_TRIO_SQN_MASK  0x7ff
#define PCIE_TLR_TLR_TX_SQN_STATUS__LAST_TRIO_SQN_FIELD 0,10

#define PCIE_TLR_TLR_TX_SQN_STATUS__TRIO_SQN_VLD_SHIFT 11
#define PCIE_TLR_TLR_TX_SQN_STATUS__TRIO_SQN_VLD_WIDTH 1
#define PCIE_TLR_TLR_TX_SQN_STATUS__TRIO_SQN_VLD_RESET_VAL 0
#define PCIE_TLR_TLR_TX_SQN_STATUS__TRIO_SQN_VLD_RMASK 0x1
#define PCIE_TLR_TLR_TX_SQN_STATUS__TRIO_SQN_VLD_MASK  0x800
#define PCIE_TLR_TLR_TX_SQN_STATUS__TRIO_SQN_VLD_FIELD 11,11

#define PCIE_TLR_TLR_TX_SQN_STATUS__LAST_RING_SQN_SHIFT 12
#define PCIE_TLR_TLR_TX_SQN_STATUS__LAST_RING_SQN_WIDTH 11
#define PCIE_TLR_TLR_TX_SQN_STATUS__LAST_RING_SQN_RESET_VAL 0
#define PCIE_TLR_TLR_TX_SQN_STATUS__LAST_RING_SQN_RMASK 0x7ff
#define PCIE_TLR_TLR_TX_SQN_STATUS__LAST_RING_SQN_MASK  0x7ff000
#define PCIE_TLR_TLR_TX_SQN_STATUS__LAST_RING_SQN_FIELD 12,22

#define PCIE_TLR_TLR_TX_SQN_STATUS__RING_SQN_VLD_SHIFT 23
#define PCIE_TLR_TLR_TX_SQN_STATUS__RING_SQN_VLD_WIDTH 1
#define PCIE_TLR_TLR_TX_SQN_STATUS__RING_SQN_VLD_RESET_VAL 0
#define PCIE_TLR_TLR_TX_SQN_STATUS__RING_SQN_VLD_RMASK 0x1
#define PCIE_TLR_TLR_TX_SQN_STATUS__RING_SQN_VLD_MASK  0x800000
#define PCIE_TLR_TLR_TX_SQN_STATUS__RING_SQN_VLD_FIELD 23,23

#define PCIE_TLR_TLR_TX_SQN_STATUS__TX_GATE_SQN_SHIFT 24
#define PCIE_TLR_TLR_TX_SQN_STATUS__TX_GATE_SQN_WIDTH 11
#define PCIE_TLR_TLR_TX_SQN_STATUS__TX_GATE_SQN_RESET_VAL 0
#define PCIE_TLR_TLR_TX_SQN_STATUS__TX_GATE_SQN_RMASK 0x7ff
#define PCIE_TLR_TLR_TX_SQN_STATUS__TX_GATE_SQN_MASK  _64bit(0x7ff000000)
#define PCIE_TLR_TLR_TX_SQN_STATUS__TX_GATE_SQN_FIELD 24,34

#define PCIE_TLR_TLR_TX_SQN_STATUS__TX_FULL_SQN_OVRD_SHIFT 35
#define PCIE_TLR_TLR_TX_SQN_STATUS__TX_FULL_SQN_OVRD_WIDTH 1
#define PCIE_TLR_TLR_TX_SQN_STATUS__TX_FULL_SQN_OVRD_RESET_VAL 0
#define PCIE_TLR_TLR_TX_SQN_STATUS__TX_FULL_SQN_OVRD_RMASK 0x1
#define PCIE_TLR_TLR_TX_SQN_STATUS__TX_FULL_SQN_OVRD_MASK  _64bit(0x800000000)
#define PCIE_TLR_TLR_TX_SQN_STATUS__TX_FULL_SQN_OVRD_FIELD 35,35

#endif /* !defined(__DOXYGEN__) */

#endif /* !defined(__REGS_PCIE_TLR_DEF_H__) */
